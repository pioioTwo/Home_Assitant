blueprint:
  name: Notificações do Frigate (0.12.0.4e)
  author: SgtBatten (Tradução PT-BR)
  homeassistant:
    min_version: 2024.6.0
  description: |
    ## Notificações do Frigate

    Este blueprint enviará uma notificação para o seu dispositivo quando um evento do Frigate para a câmera selecionada for disparado. A notificação inicialmente incluirá a miniatura da detecção, mas incluirá uma notificação acionável permitindo que você visualize o clipe e a captura.

    Com este blueprint, você pode enviar a notificação para múltiplos dispositivos deixando o campo "Device" em branco e usando um [grupo de notificações][1].

    ### Requisitos de Versão do Software
      - Versão mínima do Home Assistant: 2022.2
      - Versão mínima do Frigate: 0.11.0
      - Versão mínima da Integração do Frigate: 3.0.0
        - **Nota:** "Habilitar o proxy de evento de notificação não autenticado" deve ser marcado durante a configuração.
      - Um broker MQTT conectado ao Home Assistant e ao Frigate.
      - Versão mínima do iOS: 15.0

    ### Entidades Necessárias:
      - Nome da Câmera do Frigate
      - Dispositivo Móvel (Executando o aplicativo HA Companion)

    ### Funcionalidades:
      - Selecione facilmente a entidade da câmera ou dispositivo móvel usando um menu suspenso.
      - Envie notificações para um dispositivo móvel Android ou iOS ou para uma TV.
        - ou um grupo contendo qualquer combinação dos acima.
        - para alertas de TV, você precisa instalar e configurar https://www.home-assistant.io/integrations/nfandroidtv/
      - Configure o título e a mensagem da notificação.
      - Trate dinamicamente coisas como tipo de objeto, zonas e detecção facial do doubletake.
      - Lide automaticamente com alguns erros comuns como correspondência de maiúsculas e minúsculas e URLs inválidas, etc.
      - Opcionalmente, envie a notificação como um alerta crítico. (Crítico)
      - Opcionalmente, limite a reprodução de áudio para atualizações secundárias de notificação, e no iOS, personalizar o som. (Alerta Único)
      - Escolha se deseja ou não atualizar a notificação com novas miniaturas à medida que elas se tornam disponíveis.
      - Personalize a cor e o ícone da notificação.
      - Opcionalmente, envie uma visualização ao vivo para iOS.
      - Configure canais de notificação personalizados no Android.
      - Especifique quais [zonas][2] serão notificadas. (Filtro de Zona)
        - Escolha entre aplicar todas as zonas necessárias simultaneamente ou qualquer uma zona.
      - Especifique quais tipos de [objetos][3] serão notificados. (Filtro de Objeto)
      - Desative notificações se uma entidade de presença ou grupo estiver "em casa". (Filtro de Presença)
      - Limite notificações com base no estado de outra entidade. (Filtro de Estado)
      - Limite notificações para determinadas horas do dia. (Filtro de Tempo)
      - Configure um cooldown para a câmera a fim de reduzir o número de notificações quando eventos consecutivos ocorrerem.
      - Silencie futuras notificações por um período definido por meio de notificações acionáveis. Isso é útil em situações onde você sabe que estará gerando detecções por um período prolongado. Ex: crianças brincando do lado de fora.
      - Defina um temporizador de ociosidade para notificá-lo sobre objetos estacionários que permaneçam por um tempo determinado.
      - Configure o que acontece quando você toca na notificação. (Ação de Toque)
      - Configure 3 botões de ação para abrir quase qualquer coisa. (os padrões são: Ver Clipe, Ver Captura, e Silenciar Novas Notificações)
      - Configure o tamanho, transparência, posição e duração das notificações na TV.
      - Opção de depuração para ajudar na resolução de problemas.
      - Suporte para várias instâncias do Frigate, especificando o ClientID e o tópico MQTT.
      - Atraso opcional para a notificação inicial para ver se resolve o problema de imagem não anexada.
      - Visualização ao vivo no iOS.
      - Opção Android: Fixa conforme https://community.home-assistant.io/t/frigate-mobile-app-notifications/311091/1043
      - Adicione um atraso de 5 segundos para a atualização final da notificação para garantir que o Frigate tenha tempo de salvar edições da miniatura (corte, caixa delimitadora, etc.) se "atualizar miniatura" estiver ativado.
      - Adicione a opção de Vídeo (gif) para Android, que será enviado 5 segundos após o evento terminar.
      - Suporte para legendas.
      - Vídeo para iOS enviado 5 segundos após o evento terminar.
      - Defina uma entidade personalizada para a visualização ao vivo no iOS.
      - Defina ícones para os botões de ação no iOS.
      - Remova os sublinhados e números finais do nome da câmera. (Isso quebrará a automação para qualquer câmera do Frigate cujo nome termine em _x.)
      - Opção Android Auto.
      - Filtro Personalizado.
      - Personalize o grupo em dispositivos móveis.
      - Opções de caixa delimitadora e corte para o anexo.
      - Defina o volume da notificação no iOS
      - Integra com o Double Take para substituir rótulos de objetos por nomes caso um rosto seja identificado.

    [1]: https://companion.home-assistant.io/docs/notifications/notifications-basic#sending-notifications-to-multiple-devices
    [2]: https://blakeblackshear.github.io/frigate/configuration/cameras#zones
    [3]: https://blakeblackshear.github.io/frigate/configuration/objects

    ## Suporte
    Acesse https://github.com/SgtBatten/HA_blueprints para relatar bugs, solicitar novos recursos ou obter suporte com sua configuração.


domain: automation
source_url: https://github.com/SgtBatten/HA_blueprints/blob/main/Frigate_Camera_Notifications/Stable.yaml
input:
  camera:
    name: Câmera Frigate
    description: |
      Selecione a entidade da câmera que acionará as notificações.
      Se você não ver câmeras listadas no menu suspenso, verifique se você tem a integração Frigate instalada.

      Nota: A automação depende do nome da câmera no Frigate corresponder ao ID da entidade no Home Assistant. Ela irá automaticamente remover "_x" do final do ID da entidade onde x é um número. Se o nome da sua câmera no Frigate terminar em "_x", você precisará editar manualmente o YAML dessa automação para adicioná-la duas vezes, por exemplo, camera.front_1_1.
    selector:
      entity:
        integration: frigate
        domain: camera
        device_class: camera
  notify_device:
    name: Dispositivo Móvel
    description: Selecione um dispositivo que execute o aplicativo oficial do Home Assistant para receber notificações. Se você deseja notificar um grupo de dispositivos e/ou Android/Fire TV, use o campo abaixo para substituir essa seleção. Este campo será ignorado neste caso, mas ainda assim é necessário.
    default: false
    selector:
      device:
        integration: mobile_app
  notify_group:
    name: Grupo de Notificação ou Android/Fire TV (Opcional)
    description: |
      O nome do grupo ou TV individual para enviar as notificações.
      Se configurado, isso substituirá os dispositivos individuais acima.

      Nota: Se o grupo contiver dispositivos móveis e TVs, a TV não exibirá a miniatura, a menos que "Notificações de TV" esteja ativado. No entanto, isso impedirá que os telefones Android recebam miniaturas.
    default: ""
  base_url:
    name: URL Base (Opcional)
    description: |
      A URL externa para sua instância do Home Assistant.
      Recomendado para iOS e necessário para Android/Fire TV.
      Deve incluir o esquema, ou seja, http:// ou https://
      Exemplos: http://192.168.1.25:8123   https://homeassistant.mydomain.com
    default: ""
  mqtt_topic:
    name: Tópico MQTT (Avançado)
    description: O tópico MQTT que o Frigate usa para enviar mensagens.
    default: frigate/events
  client_id:
    name: ID do Cliente (Opcional - Avançado)
    description: Usado para suportar várias instâncias do Frigate. Deixe em branco se você não souber o que fazer.
    default: ""
  notification_customisations:
    name: |
      # Personalizações de Notificação
    description: Estas são as opções de personalização de notificação
    icon: mdi:bell
    collapsed: true
    input:
      title:
        name: Título da Notificação (Opcional)
        description: O título da notificação.

        default: ""
      message:
        name: Mensagem da Notificação
        description: |
          A mensagem da notificação.
          Você pode usar variáveis como {{camera_name}} e {{label}}
          Exemplo: A {{ label }} {{ 'está vagando' se loitering else 'foi detectado' }} na câmera {{ camera_name }}.

          default: A {{ label }} {{ 'está vagando' se loitering else 'foi detectado' }} na câmera {{ camera_name }}.
          selector:
            select:
              options:
                - label: "Padrão:   ex: Uma pessoa foi detectada na câmera Side."
                  value: "A {{ label }} {{ 'está vagando' se loitering else 'foi detectado' }} na câmera {{ camera_name }}."
                - label: "Curto:     ex: Pessoa detectada - Side"
                  value: "{{ label }} detectada - {{ camera_name }}"
                - label: "Curto com horário HH:MM"
                  value: "{{ label }} detectada - {{ camera_name }} às {{event['after']['start_time']|timestamp_custom('%H:%M')}}"
                - label: "Longo:     ex: Uma pessoa foi detectada na câmera Side na entrada."
                  value: "A {{ label }} {{ 'está vagando' se loitering else 'foi detectado' }} na câmera {{ camera_name }}{% if enteredzones %} na(s) {{ enteredzones | join(', ') | replace('_',' ') }}{% endif %}."
                - label: "Longo com horário HH:MM"
                  value: "A {{ label }} {{ 'está vagando' se loitering else 'foi detectado' }} na câmera {{ camera_name }}{% if enteredzones %} na(s) {{ enteredzones | join(', ') | replace('_',' ') }}{% endif %} às {{event['after']['start_time']|timestamp_custom('%H:%M')}}."
              custom_value: true
        update_sub_label:
          name: Atualizar Subtítulo (Avançado)
          description: |
            Atualizar o título e/ou mensagem com o nome do rosto correspondente e acionar uma atualização da notificação.
 

            Requer detecção de rosto configurada (Avançado). Requer que o Título e/ou Mensagem contenham 'Uma Pessoa' ou 'A {{ label }}'
          default: true
          selector:
            boolean:
        subtítulo:
          name: Subtítulo
          description: Um título secundário que você pode usar em suas notificações.
          default: ""
        crítico:
          name: Notificação Crítica (Opcional)
          description: |
            Enviar como uma notificação crítica para o dispositivo móvel. Isso ignorará os modos silencioso/vibração.
            Você pode escolher limitar as notificações críticas para certos horários usando um modelo (alguns exemplos são fornecidos, mas você pode inserir o seu próprio, desde que ele retorne true ou false)
          default: "false"
          selector:
            select:
              options:
                - "false"
                - "true"
                - "{{'false' se agora().hora em [8,9,10,11,12,13,14,15,16,17,18] else 'true'}}"
                - "{{'true' se o estado('sun.sun', 'above_horizon') else 'false' }}"
                - "{{ event['after']['top_score'] |float(0) > 0.8 }}"
              custom_value: true
        alerta_uma_vez:
          name: Alerta Único (Opcional)
          description: Apenas a primeira notificação de cada evento emitirá um som. Atualizações, incluindo novas miniaturas, serão silenciosas. Usuários iOS que utilizam Notificações Críticas acima ainda ouvirão sons críticos padrão para atualizações.
          default: false
          selector:
            boolean:
        anexo:
          name: Anexo
          description: |
            Escolha qual imagem anexar à notificação.

            Nota: TVs sempre receberão a captura de tela se TV estiver ativado.
          default: thumbnail.jpg
          selector:
            select:
              options:
                - label: Miniatura
                  value: thumbnail.jpg
                - label: Captura de tela
                  value: snapshot.jpg
                - label: Captura de tela com caixa delimitadora
                  value: snapshot.jpg?bbox=1
                - label: Captura de tela recortada
                  value: snapshot.jpg?crop=1
                - label: Captura de tela recortada com caixa delimitadora
                  value: snapshot.jpg?bbox=1&crop=1
              mode: dropdown
        atualizar_miniatura:
          name: Atualizar Imagem (Opcional)
          description: Atualizar a notificação se uma nova imagem "melhor" estiver disponível.
          default: false
          selector:
            boolean:
        video:
          name: Vídeo (Opcional)
          description: Você pode opcionalmente anexar o clipe à notificação, o que substituirá a miniatura/captura de tela acima, se disponível.
          default: ""
          selector:
            select:
              options:
                - label: Nenhum
                  value: ""
                - label: Clipe
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
        cor:
          name: Cor da Notificação - Somente Android/TV (Opcional)
          description: Defina a cor da notificação no seu dispositivo Android ou TV.
          default: "#03a9f4"
          selector:
            select:
              options:
                - label: Primária (Steelblue)
                  value: "#03a9f4"
                - label: Vermelho
                  value: "#f44336"
                - label: Rosa
                  value: "#e91e63"
                - label: Roxo
                  value: "#926bc7"
                - label: Roxo Escuro
                  value: "#6e41ab"
                - label: Índigo
                  value: "#3f51b5"
                - label: Azul
                  value: "#2196f3"
                - label: Azul Claro
                  value: "#03a9f4"
                - label: Ciano
                  value: "#00bcd4"
                - label: Teal
                  value: "#009688"
                - label: Verde
                  value: "#4caf50"
                - label: Verde Claro
                  value: "#8bc34a"
                - label: Lima
                  value: "#cddc39"
                - label: Amarelo
                  value: "#ffeb3b"
                - label: Âmbar
                  value: "#ffc107"
                - label: Laranja
                  value: "#ff9800"
                - label: Laranja Escuro
                  value: "#ff5722"
                - label: Marrom
                  value: "#795548"
                - label: Cinza Claro
                  value: "#bdbdbd"
                - label: Cinza
                  value: "#9e9e9e"
                - label: Cinza Escuro
                  value: "#606060"
                - label: Cinza Azul
                  value: "#607d8b"
                - label: Preto
                  value: "#000000"
                - label: Branco
                  value: "#ffffff"
        ícone:
          name: Ícone da Notificação (Opcional)
          description: Altere o ícone que será exibido na notificação. Você pode inserir um ícone único ou criar um template como o exemplo dado no dropdown. Deve incluir 'mdi:' no nome do ícone.
          default: mdi:homeassistant
          selector:
            select:
              options:
                - mdi:homeassistant
                - mdi:cctv
                - "mdi:{{'account-outline' if label == 'Person' else 'dog' if label == 'Dog' else 'cat' if label == 'Cat' else 'car' if label == 'Car' else 'home-assistant'}}"
              custom_value: true
        grupo:
          name: Grupo
          description: O nome do grupo que determinará se as notificações serão agrupadas no seu dispositivo móvel. Se quiser que as notificações sejam agrupadas por câmera, certifique-se de que o nome contenha {{camera}}.
          default: "{{camera}}-frigate-notification{{'-loitering' if loitering}}"
        som:
          name: Som da Notificação - Somente iOS (Opcional)
          description: Você pode especificar um arquivo de som no seu dispositivo que será reproduzido para as notificações. Será necessário importar o arquivo de som para o Home Assistant.
          default: default
          selector:
            select:
              options:
                - default
                - none
              custom_value: true
        volume:
          name: Volume do Som - Somente iOS (Opcional)
          description: Você pode especificar um nível de som entre 0 e 100.
          default: 100
          selector:
            number:
              max: 100
              min: 0
              unit_of_measurement: "%"
              step: 1
              mode: slider
        ios_live_view:
          name: Entidade de Visão ao Vivo - Somente iOS (Opcional)
          description: Anexar uma visão ao vivo da entidade selecionada à notificação para dispositivos iOS.
          default: ""
          selector:
            entity:
              domain: camera
        android_auto:
          name: Android Auto
          description: Exibir a notificação no Android Auto se o dispositivo de recepção estiver conectado.
          default: false
          selector:
            boolean:
        sticky:
          name: Persistente - Somente Android (Opcional)
          description: |
            Quando ativado, a notificação permanecerá ativa no dispositivo após ser tocada e ficará lá até ser removida.
          default: false
          selector:
            boolean:
        channel:
          name: Canal de Notificação - Somente Android (Opcional)
          description: Crie um novo canal para notificações para permitir sons de notificações personalizados, padrões de vibração e substituição do modo Não Perturbe. Configurado diretamente no dispositivo.
          default: ""
    filters:
      name: |
        # Filtros
      description: Estas são as Opções de Filtro
      icon: mdi:filter
      collapsed: true
      input:
        zone_filter:
          name: Filtro de Zona ligado/desligado (Opcional)
          description: Ativar para notificar somente se um objeto entrou em uma zona listada abaixo.
          default: false
          selector:
            boolean:
        zones:
          name: Zonas Requeridas (Opcional - Ativado Acima)
          description: |
            Insira o nome de uma zona por vez. Deve ser minúsculo e incluir underscores conforme sua configuração no Frigate.
            Por padrão, qualquer zona é aceitável. Se desejar que TODAS as zonas listadas sejam acessadas antes de receber uma notificação, ative a alternância para múltiplas zonas abaixo.
          default: []
          selector:
            select:
              options:
                - examples
                - porch
                - front_door
                - side
                - garden
              multiple: true
              custom_value: true
        zone_multi:
          name: Múltiplas Zonas (Opcional)
          description: Exigir que todas as zonas especificadas acima sejam acessadas, em vez de qualquer zona listada. O Filtro de Zona também deve ser ativado.
          default: false
          selector:
            boolean:
        labels:
          name: Filtro de Objeto (Opcional)
          description: |
            Especifique os objetos sobre os quais deseja ser notificado. Insira ou selecione um objeto por vez.
          default: ""
          selector:
            select:
              options:
                - person
                - dog
                - cat
                - car
                - package
                - bird
              multiple: true
              custom_value: true
        presence_filter:
          name: Filtro de Presença (Opcional)
          description: Notificar somente se TODAS as entidades de presença selecionadas não estiverem "em casa".
          default: ""
          selector:
            entity:
              filter:
                domain:
                  - device_tracker
                  - person
                  - group
              multiple: true
        state_filter:
          name: Filtro de Estado ligado/desligado (Opcional)
          description: Ativar as duas configurações de Filtro de Estado abaixo. Notificar somente se a entidade selecionada estiver nos estados especificados.
          default: false
          selector:
            boolean:
        state_entity:
          name: Entidade de Filtro de Estado (Opcional)
          description: Notificar somente se a entidade selecionada estiver no estado abaixo. Você deve ativar "Filtro de Estado" acima para usar isso.
          default: ""
          selector:
            entity:
        state_filter_states:
          name: Estados de Filtro de Estado (Opcional)
          description: Insira os estados que a entidade acima deve ter, um de cada vez.
          default: []
          selector:
            select:
              options: []
              multiple: true
              custom_value: true
        disable_times:
          name: Filtro de Tempo (Opcional)
          description: Impedir que as notificações sejam enviadas durante as horas especificadas.
          default: []
          selector:
            select:
              multiple: true
              options:
                - label: 00:00 - 00:59
                  value: "0"
                - label: 01:00 - 01:59
                  value: "1"
                - label: 02:00 - 02:59
                  value: "2"
                - label: 03:00 - 03:59
                  value: "3"
                - label: 04:00 - 04:59
                  value: "4"
                - label: 05:00 - 05:59
                  value: "5"
                - label: 06:00 - 06:59
                  value: "6"
                - label: 07:00 - 07:59
                  value: "7"
                - label: 08:00 - 08:59
                  value: "8"
                - label: 09:00 - 09:59
                  value: "9"
                - label: 10:00 - 10:59
                  value: "10"
                - label: 11:00 - 11:59
                  value: "11"
                - label: 12:00 - 12:59
                  value: "12"
                - label: 13:00 - 13:59
                  value: "13"
                - label: 14:00 - 14:59
                  value: "14"
                - label: 15:00 - 15:59
                  value: "15"
                - label: 16:00 - 16:59
                  value: "16"
                - label: 17:00 - 17:59
                  value: "17"
                - label: 18:00 - 18:59
                  value: "18"
                - label: 19:00 - 19:59
                  value: "19"
                - label: 20:00 - 20:59
                  value: "20"
                - label: 21:00 - 21:59
                  value: "21"
                - label: 22:00 - 22:59
                  value: "22"
                - label: 23:00 - 23:59
                  value: "23"
        cooldown:
          name: Cooldown (Opcional)
          description: Atraso antes de enviar outra notificação para esta câmera após o último evento.
          default: 30
          selector:
            number:
              max: 86400
              min: 0
              unit_of_measurement: segundos
        custom_filter:
          name: Filtro Personalizado (Opcional - Avançado)
          description: Um filtro que deve resultar em verdadeiro ou falso, mas pode ser templado conforme necessário. Você precisará garantir que esteja envolvido com as \"aspas\" e \{\{colchetes\}\}.
          default: true
        silence_timer:
          name: Silenciar Notificações de Novos Objetos (Opcional)
          description: |
            Quanto tempo silenciar as notificações para esta câmera quando solicitado como parte da notificação acionável.
            Nota: Isso só se aplica a novos objetos. Objetos rastreados existentes não serão afetados.
          default: 30
          selector:
            number:
              max: 3600
              min: 0
              unit_of_measurement: minutos
        loiter_timer:
          name: Notificações de Permanência (Opcional)
          description: >
            Envia nova notificação de permanência se um objeto estacionário for detectado por mais tempo
            do que o tempo especificado. 0 significa desativado e não enviará notificações.
          default: 0
          selector:
            number:
              max: 3600
              min: 0
              unit_of_measurement: segundos
        initial_delay:
          name: Atraso na notificação inicial (Opcional)
          description: |
            Quanto tempo atrasar a primeira notificação para cada evento.

            Use isso se você NÃO usar "atualizar imagem" e estiver experimentando notificações sem imagens anexadas. Comece com números pequenos.
          default: 0
          selector:
            number:
              max: 15
              min: 0
              unit_of_measurement: segundos
    actions:
      name: |
        # Botões de Ação e URLs
      description: Estas são as Opções de Botões de Ação e URLs
      icon: mdi:gesture-double-tap
      collapsed: true
      input:
        tap_action:
          name: URL da Ação ao Tocar
          description:
            A URL a ser aberta ao tocar na notificação. Alguns presets estão disponíveis, você também pode definir os seus próprios digitando na caixa.

            Essas opções definem o texto e as URLs associadas aos três botões de ação na parte inferior da notificação.
          default: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
          selector:
            select:
              options:
                - label: Ver Clipe
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
                - label: Ver Snapshot
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                - label: Ver Transmissão
                  value: "{{base_url}}/api/camera_proxy_stream/camera.{{trigger.payload_json['after']['camera'] | lower | replace('-','_')}}?token={{state_attr( 'camera.' ~ camera, 'access_token')}}"
                - label: Abrir Home Assistant (web)
                  value: "{{base_url}}/lovelace"
                - label: Abrir Home Assistant (app)
                  value: /lovelace
                - label: Abrir Frigate
                  value: /ccab4aaf_frigate/dashboard
                - label: Abrir Frigate (Acesso Completo)
                  value: /ccab4aaf_frigate-fa/dashboard
                - label: Abrir Frigate (proxy)
                  value: /ccab4aaf_frigate-proxy/dashboard
                - label: Abrir App Reolink (Android)
                  value: app://com.mcu.reolink
                - label: Ação Personalizada (Gatilho Manual)
                  value: custom-{{ camera }}
              custom_value: true
        button_1:
          name: Texto do Botão de Ação 1
          description: 'O texto usado no primeiro botão de Ação na parte inferior da notificação. Defina a URL abaixo. (O padrão é "Ver Clipe")'
          default: "Ver Clipe"
        url_1:
          name: URL do Botão de Ação 1
          description: Personalize o que acontece quando você pressiona o primeiro Botão de Ação. Selecione uma das opções pré-configuradas ou insira sua própria URL personalizada.
          default: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
          selector:
            select:
              options:
                - label: Ver Clipe
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
                - label: Ver Snapshot
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                - label: Ver Transmissão
                  value: "{{base_url}}/api/camera_proxy_stream/camera.{{trigger.payload_json['after']['camera'] | lower | replace('-','_')}}?token={{state_attr( 'camera.' ~ camera, 'access_token')}}"
                - label: Abrir Home Assistant (web)
                  value: "{{base_url}}/lovelace"
                - label: Abrir Home Assistant (app)
                  value: /lovelace
                - label: Abrir Frigate
                  value: /ccab4aaf_frigate/dashboard
                - label: Abrir Frigate (Acesso Completo)
                  value: /ccab4aaf_frigate-fa/dashboard
                - label: Abrir Frigate (proxy)
                  value: /ccab4aaf_frigate-proxy/dashboard
                - label: Abrir App Reolink (Android)
                  value: app://com.mcu.reolink
                - label: Ação Personalizada (Gatilho Manual)
                  value: custom-{{ camera }}
              custom_value: true
        icon_1:
          name: Ícone do Botão de Ação 1 - Apenas iOS
          description: Personalize o Ícone no primeiro Botão de Ação. Apenas a biblioteca SFSymbols do iOS é suportada, não mdi:ícones. Exemplo: sfsymbols:bell
          default: ""
        button_2:
          name: Texto do Botão de Ação 2
          description: "O texto usado no segundo botão de Ação na parte inferior da notificação. Defina a URL abaixo."
          default: "Ver Snapshot"
        url_2:
          name: URL do Botão de Ação 2
          description: Personalize o que acontece quando você pressiona o segundo Botão de Ação. Selecione uma das opções pré-configuradas ou insira sua própria URL personalizada.
          default: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
          selector:
            select:
              options:
                - label: Ver Clipe
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
                - label: Ver Snapshot
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                - label: Ver Transmissão
                  value: "{{base_url}}/api/camera_proxy_stream/camera.{{trigger.payload_json['after']['camera'] | lower | replace('-','_')}}?token={{state_attr( 'camera.' ~ camera, 'access_token')}}"
                - label: Abrir Home Assistant (web)
                  value: "{{base_url}}/lovelace"
                - label: Abrir Home Assistant (app)
                  value: /lovelace
                - label: Abrir Frigate
                  value: /ccab4aaf_frigate/dashboard
                - label: Abrir Frigate (Acesso Completo)
                  value: /ccab4aaf_frigate-fa/dashboard
                - label: Abrir Frigate (proxy)
                  value: /ccab4aaf_frigate-proxy/dashboard
                - label: Abrir App Reolink (Android)
                  value: app://com.mcu.reolink
                - label: Ação Personalizada (Gatilho Manual)
                  value: custom-{{ camera }}
              custom_value: true
        icon_2:
          name: Ícone do Botão de Ação 2 - Apenas iOS
          description: Personalize o Ícone no segundo Botão de Ação. Apenas a biblioteca SFSymbols do iOS é suportada, não mdi:ícones. Exemplo: sfsymbols:bell
          default: ""
        button_3:
          name: Texto do Botão de Ação 3
          description: "O texto usado no terceiro botão de Ação na parte inferior da notificação. Defina a URL abaixo."
          default: "Silenciar Novas Notificações"
        url_3:
          name: URL do Botão de Ação 3
          description: Personalize o que acontece quando você pressiona o terceiro Botão de Ação. Selecione uma das opções pré-configuradas ou insira sua própria URL personalizada.
          default: silence-{{ camera }}
          selector:
            select:
              options:
                - label: Silenciar Novas Notificações
                  value: silence-{{ camera }}
                - label: Ver Clipe
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
                - label: Ver Snapshot
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                - label: Ver Transmissão
                  value: "{{base_url}}/api/camera_proxy_stream/camera.{{trigger.payload_json['after']['camera'] | lower | replace('-','_')}}?token={{state_attr( 'camera.' ~ camera, 'access_token')}}"
                - label: Abrir Home Assistant (web)
                  value: "{{base_url}}/lovelace"
                - label: Abrir Home Assistant (app)
                  value: /lovelace
                - label: Abrir Frigate
                  value: /ccab4aaf_frigate/dashboard
                - label: Abrir Frigate (Acesso Completo)
                  value: /ccab4aaf_frigate-fa/dashboard
                - label: Abrir Frigate (proxy)
                  value: /ccab4aaf_frigate-proxy/dashboard
                - label: Abrir App Reolink (Android)
                  value: app://com.mcu.reolink
                - label: Ação Personalizada (Gatilho Manual)
                  value: custom-{{ camera }}
              custom_value: true
        icon_3:
          name: Ícone do Botão de Ação 3 - Apenas iOS
          description: Personalize o Ícone no terceiro Botão de Ação. Apenas a biblioteca SFSymbols do iOS é suportada, não mdi:ícones. Exemplo: sfsymbols:bell
          default: ""
        custom_action_manual:
          name: Ação Personalizada (Gatilho Manual)
          description: Ação personalizável que você pode acionar com os Botões de Ação Personalizados na notificação. Selecione Ação Personalizada em qualquer Botão de Ação acima.
          selector:
            action: {}
          default: []
        custom_action_auto:
          name: Ação Personalizada (Gatilho Automático)
          description: Ação personalizável que será acionada na notificação inicial (sujeita a todas as outras condições de notificação).
          selector:
            action: {}
          default: []
        custom_action_auto_multi:
          name: Ação Personalizada (Gatilho Automático em Loop)
          description: Ação personalizável que será acionada em todas as notificações subsequentes (sujeita a todas as outras condições de notificação). Se você quiser que ela também seja acionada na notificação inicial, deve inseri-la em ambos os campos de entrada.
          selector:
            action: {}
          default: []
    tv_notifications:
      name: |
        # Notificações para TV
      description: Estas são as opções de Notificação para TV
      icon: mdi:television
      collapsed: true
      input:
        tv:
          name: Notificação para TV (Opcional)
          description: Defina como verdadeiro se estiver notificando uma TV Android/Fire
            Também pode ser usado para priorizar snapshots na TV em relação a aplicativos móveis Android quando notificar um grupo de dispositivos mistos.
            A URL base deve ser configurada

            As configurações abaixo são para notificações de TV apenas
          default: false
          selector:
            boolean:
        tv_position:
          name: Posição da Notificação na TV (Opcional)
          description: Defina a posição da notificação na sua TV
          default: center
          selector:
            select:
              mode: dropdown
              options:
                - bottom-right
                - bottom-left
                - top-right
                - top-left
                - center
        tv_size:
          name: Tamanho da Notificação na TV (Opcional)
          description: Defina o tamanho da notificação na sua TV.
          default: large
          selector:
            select:
              mode: dropdown
              options:
                - small
                - medium
                - large
                - max
        tv_duration:
          name: Duração da Notificação na TV (Opcional)
          description: A duração (em segundos) que a notificação será exibida na sua TV.
          default: 10
          selector:
            number:
              max: 300
              min: 0
              unit_of_measurement: seconds
        tv_transparency:
          name: Transparência da Notificação na TV (Opcional)
          description: Defina a transparência da notificação na sua TV.
          default: 0%
          selector:
            select:
              mode: dropdown
              options:
                - 0%
                - 25%
                - 50%
                - 75%
                - 100%
        tv_interrupt:
          name: Interrupção da Notificação na TV (Opcional)
          description: "Se definido como verdadeiro, a notificação é interativa e pode ser descartada ou selecionada para exibir mais detalhes. Dependendo do aplicativo em execução (por exemplo, Netflix), isso pode parar a reprodução."
          default: false
          selector:
            boolean:
    debug:
      name: |
        # DEBUG
      description: Estas são as opções de DEBUG
      icon: mdi:bug
      collapsed: true
      input:
        debug:
          name: Debug
          description: |
            # DEBUG

            Habilite para enviar mensagens de depuração para o logbook do Home Assistant.
          default: false
          selector:
            boolean:
mode: parallel
trigger_variables:
  input_camera: !input camera
  camera: "{{ input_camera | regex_replace('^camera\\.|_\\d+$', '') }}"
  mqtt_topic: !input mqtt_topic
trigger:
  - platform: mqtt
    topic: "{{mqtt_topic}}"
    payload: "{{ camera }}/new"
    value_template: "{{ value_json['after']['camera'] | lower | replace('-','_') }}/{{ value_json['type']}}"
    id: frigate-event
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: "silence-{{ camera }}"
    id: silence
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: "custom-{{ camera }}"
    id: custom
variables:
  input_camera: !input camera
  camera: "{{ input_camera | regex_replace('^camera\\.', '') }}"
  camera_name: "{{ camera | replace('_', ' ') | title }}"
  input_base_url: !input base_url
  base_url: "{{ input_base_url.rstrip('/')}}"
  update_sub_label: !input update_sub_label
  input_client_id: !input client_id
  client_id: "{{input_client_id if not input_client_id else '/' + input_client_id if '/' not in input_client_id else input_client_id }}"
  attachment: !input attachment
  alert_once: !input alert_once
  update_thumbnail: !input update_thumbnail
  ios_live_view: !input ios_live_view
  android_auto: !input android_auto
  notify_group: !input notify_group
  notify_group_target: "{{ notify_group | lower | regex_replace('^notify\\.', '') | replace(' ','_') }}"
  zone_only: !input zone_filter
  input_zones: !input zones
  zones: "{{ input_zones }}"
  zone_multi: !input zone_multi
  input_labels: !input labels
  labels: "{{ input_labels | list | lower }}"
  presence_entity: !input presence_filter
  disable_times: !input disable_times
  cooldown: !input cooldown
  loitering: false
  loiter_timer: !input loiter_timer
  initial_delay: !input initial_delay
  fps: "{{ states('sensor.' + camera + '_camera_fps')|int(5) }}"
  state_only: !input state_filter
  input_entity: !input state_entity
  input_states: !input state_filter_states
  states_filter: "{{ input_states | list | lower }}"
  color: !input color
  sound: !input sound
  input_volume: !input volume
  volume: "{{ (1 * input_volume|int(100))/100 }}"
  sticky: !input sticky
  tv: !input tv
  tv_position: !input tv_position
  tv_size: !input tv_size
  tv_duration: !input tv_duration
  tv_transparency: !input tv_transparency
  tv_interrupt: !input tv_interrupt
  debug: !input debug
action:
  - choose:
      - alias: "Silence New Object Notifications"
        conditions:
          - condition: trigger
            id: silence
        sequence:
          - service: automation.turn_off
            target:
              entity_id: "{{ this.entity_id }}"
            data:
              stop_actions: false
          - delay:
              minutes: !input silence_timer
          - service: automation.turn_on
            target:
              entity_id: "{{ this.entity_id }}"
      - alias: "Custom Action Manual"
        conditions:
          - condition: trigger
            id: custom
        sequence: !input "custom_action_manual"
      - alias: "Frigate Event"
        conditions:
          - condition: trigger
            id: "frigate-event"
          - "{{ is_state(this.entity_id, 'on') }}"
          - "{{ not this.attributes.last_triggered or (now() - this.attributes.last_triggered).seconds > cooldown }}"
          - "{{ not disable_times|length or not now().hour in disable_times|map('int')|list }}"
        sequence:
          - variables:
              event: "{{ trigger.payload_json }}"
              id: "{{ trigger.payload_json['after']['id'] }}"
              object: "{{ trigger.payload_json['after']['label'] }}"
              label: "{{ object | title }}"
              # Dynamic Variables per event
              initial_home: "{{presence_entity |reject('in', '') |select('is_state', 'home') |list |length != 0 }}"
              enteredzones: "{{ trigger.payload_json['after']['entered_zones']}}"
              zone_multi_filter: "{{zone_only and zone_multi and enteredzones|length and zones and zones |reject('in', enteredzones) |list |length == 0 }}"
              loitering: false
              # Customisation of text
              title: !input title
              message: !input message
              subtitle: !input subtitle
              tap_action: !input tap_action
              button_1: !input button_1
              button_2: !input button_2
              button_3: !input button_3
              url_1: !input url_1
              url_2: !input url_2
              url_3: !input url_3
              icon_1: !input icon_1
              icon_2: !input icon_2
              icon_3: !input icon_3
              # other things that can be templated and might need info from the event
              critical_input: !input critical
              critical: "{{ true if critical_input == 'true' else true if critical_input == True else false }}"
              custom_filter: !input custom_filter
              icon: !input icon
              group: !input group
              channel: !input channel
              video: !input video
              custom_action_auto: !input custom_action_auto
          - alias: "Debug: write to Log"
            choose:
              - conditions:
                  - "{{debug}}"
                sequence:
                  - service: logbook.log
                    data_template:
                      name: Frigate Notification
                      message: |
                        DEBUG: 
                          Info:
                            fps: {{fps}}, 
                            frigate event id: {{id}}{{', Frigate client ID: ' + client_id if client_id else ''}}, 
                            object (formatted): {{object}} ({{label}}),
                          Config: 
                            camera(formatted): {{camera}}({{camera_name}}), 
                            Base URL: {{base_url}}, 
                            critical: {{critical}}, 
                            alert once: {{alert_once}}, 
                            Update Thumbnails: {{update_thumbnail}}, 
                            Video: {{video}}, 
                            Target: {{'group (input/formatted): ' + notify_group + '/' + notify_group_target + ', ' if notify_group else 'Mobile Device'}}
                            cooldown: {{cooldown}}s, 
                            loiter timer: {{loiter_timer}}s, 
                            initial delay: {{initial_delay}}s, 
                            color: {{color}}, 
                            sound: {{sound}}, 
                            android_auto: {{android_auto}}, 
                            Group: {{group}}, 
                            Channel: {{channel}}, 
                            Sticky: {{sticky}}, 
                            Title: {{title}}, 
                            Message: {{message}},
                            Subtitle: {{subtitle}}, 
                            tap_action: {{tap_action}}, 
                            button 1 Text/URL/Icon: {{iif(button_1, button_1, 'unset')}} ({{url_1}}) {{icon_1}}, 
                            button 2 Text/URL/Icon: {{button_2}} ({{url_2}}) {{icon_2}}, 
                            button 3 Text/URL/Icon: {{button_3}} ({{url_3}}) {{icon_3}}, 
                            icon: {{icon}}
                            tv: {{ tv }}, 
                            tv_position: {{tv_position}}, 
                            tv_size: {{tv_size}}, 
                            tv_duration: {{tv_duration}}, 
                            tv_transparency: {{tv_transparency}}, 
                            tv_interrupt: {{tv_interrupt}}, 
                          Filters: 
                            Zones: 
                              zone filter toggle on: {{zone_only}}, 
                              Multi-Zone toggle on: {{zone_multi}}, 
                              Required zones: {{input_zones}}, 
                              Entered Zones: {{enteredzones}}, 
                              Zone Filter TEST: {{'PASS (Multi)' if zone_multi_filter else 'PASS' if ( not zone_only or not zone_multi and zones|select('in', enteredzones)|list|length ) else 'FAIL (Multi)' if zone_multi else 'FAIL' }}, 
                            Required objects TEST: 
                              Input: {{input_labels}}, 
                              TEST: {{'PASS' if not labels|length or object in labels else 'FAIL'}}
                            presence entity (not home):
                              Entity: {{presence_entity}}
                              TEST:  {{'PASS' if not initial_home else 'FAIL'}}, 
                            disabled times: {{disable_times}}, 
                            State Filter: 
                              state filter toggle on: {{state_only}}, 
                              state filter entity: {{input_entity}}, 
                              required states: {{input_states}}, 
                              State Filter TEST: {{'PASS' if not state_only or states(input_entity)|lower in states_filter else 'FAIL' }},
                            Custom Filter: {{custom_filter}}
          - alias: "Notifications enabled for object label"
            condition: template
            value_template: "{{ not labels|length or object in labels }}"
          - alias: "Delay for image"
            choose:
              - conditions:
                  - "{{initial_delay > 0}}"
                sequence:
                  - delay:
                      seconds: "{{initial_delay}}"
          - alias: "Custom Action Auto"
            choose:
              - conditions:
                  - "{{ custom_action_auto |length > 0 }}"
                  - "{{ not zone_only or (not zone_multi and zones|select('in', enteredzones)|list|length > 0) or (zone_multi and enteredzones|length > 0 and zones |reject('in', enteredzones) |list |length == 0) }}"
                  - "{{ not initial_home }}"
                  - "{{ not state_only or states(input_entity)|lower in states_filter }}"
                sequence: !input "custom_action_auto"
          - alias: "Notify on new object"
            choose:
              - conditions:
                  - "{{ not zone_only or (not zone_multi and zones|select('in', enteredzones)|list|length > 0) or (zone_multi and enteredzones|length > 0 and zones |reject('in', enteredzones) |list |length == 0) }}"
                  - "{{ not initial_home }}"
                  - "{{ not state_only or states(input_entity)|lower in states_filter }}"
                  - "{{ custom_filter }}"
                sequence:
                  - choose:
                      - conditions: "{{ not notify_group_target }}"
                        sequence:
                          - device_id: !input notify_device
                            domain: mobile_app
                            type: notify
                            title: "{{title}}"
                            message: "{{message}}"
                            data:
                              tag: "{{ id }}"
                              group: "{{ group }}"
                              color: "{{color}}"
                              # Android Specific
                              subject: "{{subtitle}}"
                              image: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{attachment}}{{'&' if '?' in attachment else '?'}}format=android"
                              video: "{{video}}"
                              clickAction: "{{tap_action}}"
                              ttl: 0
                              priority: high
                              notification_icon: "{{icon}}"
                              sticky: "{{sticky}}"
                              channel: "{{'alarm_stream' if critical else channel}}"
                              car_ui: "{{android_auto}}"
                              # iOS Specific
                              subtitle: "{{subtitle}}"
                              url: "{{tap_action}}"
                              attachment:
                                url: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{attachment}}"
                              push:
                                sound:
                                  name: "{{sound}}"
                                  volume: "{{ iif(sound == 'none', 0, volume) }}"
                                  critical: "{{ iif(critical, 1, 0) }}"
                              entity_id: "{{ios_live_view}}"
                              # Actions
                              actions:
                                - action: URI
                                  title: "{{button_1}}"
                                  uri: "{{url_1}}"
                                  icon: "{{icon_1}}"
                                - action: URI
                                  title: "{{button_2}}"
                                  uri: "{{url_2}}"
                                  icon: "{{icon_2}}"
                                - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                  title: "{{button_3}}"
                                  uri: "{{url_3}}"
                                  icon: "{{icon_3}}"
                                  destructive: true
                      - conditions: "{{ tv }}"
                        sequence:
                          - service: "notify.{{ notify_group_target }}"
                            data:
                              title: "{{title}}"
                              message: "{{message}}"
                              data:
                                tag: "{{ id }}"
                                group: "{{ group }}"
                                color: "{{color}}"
                                # Android Specific
                                subject: "{{subtitle}}"
                                clickAction: "{{tap_action}}"
                                ttl: 0
                                priority: high
                                notification_icon: "{{icon}}"
                                sticky: "{{sticky}}"
                                channel: "{{'alarm_stream' if critical else channel}}"
                                car_ui: "{{android_auto}}"
                                # Android/Fire TV
                                image:
                                  url: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                                fontsize: "{{tv_size}}"
                                position: "{{tv_position}}"
                                duration: "{{tv_duration}}"
                                transparency: "{{tv_transparency}}"
                                interrupt: "{{tv_interrupt}}"
                                timeout: 30
                                # iOS Specific
                                subtitle: "{{subtitle}}"
                                url: "{{tap_action}}"
                                attachment:
                                  url: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{attachment}}"
                                push:
                                  sound:
                                    name: "{{sound}}"
                                    volume: "{{ iif(sound == 'none', 0, volume) }}"
                                    critical: "{{ iif(critical, 1, 0) }}"
                                entity_id: "{{ios_live_view}}"
                                # Actions
                                actions:
                                  - action: URI
                                    title: "{{button_1}}"
                                    uri: "{{url_1}}"
                                    icon: "{{icon_1}}"
                                  - action: URI
                                    title: "{{button_2}}"
                                    uri: "{{url_2}}"
                                    icon: "{{icon_2}}"
                                  - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                    title: "{{button_3}}"
                                    uri: "{{url_3}}"
                                    icon: "{{icon_3}}"
                                    destructive: true
                    default:
                      - service: "notify.{{ notify_group_target }}"
                        data:
                          title: "{{title}}"
                          message: "{{message}}"
                          data:
                            tag: "{{ id }}{{'-loitering' if loitering}}"
                            group: "{{ group }}"
                            color: "{{color}}"
                            # Android Specific
                            subject: "{{subtitle}}"
                            image: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{attachment}}{{'&' if '?' in attachment else '?'}}format=android"
                            video: "{{video}}"
                            clickAction: "{{tap_action}}"
                            ttl: 0
                            priority: high
                            notification_icon: "{{icon}}"
                            sticky: "{{sticky}}"
                            channel: "{{'alarm_stream' if critical else channel}}"
                            car_ui: "{{android_auto}}"
                            # Android/Fire TV
                            subtitle: "{{subtitle}}"
                            fontsize: "{{tv_size}}"
                            position: "{{tv_position}}"
                            duration: "{{tv_duration}}"
                            transparency: "{{tv_transparency}}"
                            interrupt: "{{tv_interrupt}}"
                            # iOS Specific
                            url: "{{tap_action}}"
                            attachment:
                              url: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{attachment}}"
                            push:
                              sound:
                                name: "{{sound}}"
                                volume: "{{ iif(sound == 'none', 0, volume) }}"
                                critical: "{{ iif(critical, 1, 0) }}"
                            entity_id: "{{ios_live_view}}"
                            # Actions
                            actions:
                              - action: URI
                                title: "{{button_1}}"
                                uri: "{{url_1}}"
                                icon: "{{icon_1}}"
                              - action: URI
                                title: "{{button_2}}"
                                uri: "{{url_2}}"
                                icon: "{{icon_2}}"
                              - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                title: "{{button_3}}"
                                uri: "{{url_3}}"
                                icon: "{{icon_3}}"
                                destructive: true
          - repeat:
              sequence:
                - wait_for_trigger:
                    - platform: mqtt
                      topic: "{{mqtt_topic}}"
                      payload: "{{ id }}"
                      value_template: "{{ value_json['after']['id'] }}"
                  timeout:
                    minutes: 2
                  continue_on_timeout: false
                - variables:
                    event: "{{ wait.trigger.payload_json }}"
                    loitering: "{{ loiter_timer and event['before']['motionless_count']/fps/60 < loiter_timer and event['after']['motionless_count']/fps/60 >= loiter_timer }}"
                    new_snapshot: "{{ update_thumbnail and event['before']['snapshot']['frame_time'] != event['after']['snapshot']['frame_time'] }}"
                    home: "{{presence_entity |reject('in', '') |select('is_state', 'home') |list |length != 0 }}"
                    presence_changed: "{{ presence_entity |reject('in', '') |expand |map(attribute='last_changed') |list |select('gt', as_datetime(event['before']['frame_time'])) |list |length != 0}}"
                    last_zones: "{{ event['before']['entered_zones']|lower}}"
                    enteredzones: "{{ event['after']['entered_zones']|lower}}"
                    zone_filter: "{{ not zone_only or zones|select('in', enteredzones)|list|length > 0 }}"
                    zone_multi_filter: "{{not zone_only or not zone_multi or ( enteredzones|list|length > 0 and zones and zones|reject('in', enteredzones)|list|length == 0 ) }}"
                    stationary_moved: "{{ event['after']['position_changes'] > event['before']['position_changes'] }}"
                    zone_only_changed: "{{ zone_only and (enteredzones|length > 0 and not last_zones|length) }}"
                    entered_zones_changed: "{{ zones|length > 0 and (zones|select('in', enteredzones)|list|length > zones|select('in', last_zones)|list|length) }}"
                    state_true: "{{ not state_only or states(input_entity)|lower in states_filter }}"
                    sub_label: >
                      {% if event['after']['sub_label'] %} 
                        {{event['after']['sub_label'][0]}}
                      {%else%}
                        {{event['after']['sub_label']}}
                      {%endif%}
                    sub_label_before: >
                      {% if event['before']['sub_label'] %} 
                        {{event['before']['sub_label'][0]}}
                      {%else%}
                        {{event['before']['sub_label']}}
                      {%endif%}
                    sub_label_changed: "{{ update_sub_label and sub_label != sub_label_before }}"
                    update: "{{ alert_once or (new_snapshot and not loitering and not presence_changed and not zone_only_changed and not entered_zones_changed and not sub_label_changed) }}"
                    critical_input: !input critical
                    critical: "{{ true if critical_input == 'true' else true if critical_input == True else false }}"
                    title: >
                      {% if sub_label and update_sub_label %} 
                        {{title | replace('A Person', sub_label|title) | replace('Person', sub_label|title)}}
                      {%else%}
                        {{title}}
                      {%endif%}
                    input_message: !input message
                    message: >
                      {% if sub_label and update_sub_label %} 
                        {{input_message | replace('A Person', sub_label|title) | replace('Person', sub_label|title)}}
                      {%else%}
                        {{input_message}}
                      {%endif%}
                    custom_action_auto_multi: !input custom_action_auto_multi
                - alias: "Update thumbnail at end of event"
                  choose:
                    - conditions:
                        - "{{wait.trigger.payload_json['type'] == 'end' }}"
                        - "{{('snapshot' in attachment and update_thumbnail) or video|length > 0}}"
                      sequence:
                        - delay:
                            seconds: 5
                        - variables:
                            new_snapshot: "{{update_thumbnail}}"
                - alias: "Debug: write to Log"
                  choose:
                    - conditions:
                        - "{{debug}}"
                      sequence:
                        - service: logbook.log
                          data_template:
                            name: Frigate Notification
                            message: |
                              DEBUG (in loop): 
                                Send Notification: {{ loitering or (custom_filter and not home and zone_filter and zone_multi_filter and state_true and (new_snapshot or presence_changed or stationary_moved or zone_only_changed or entered_zones_changed or sub_label_changed)) }}
                                Info: 
                                  sublabel: {{sub_label}}, 
                                  image: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{attachment}}"
                                  Title: {{title}}
                                  message: {{message}}
                                  iOS sound: {{'Critical' if critical else 'disabled by alert once' if alert_once else 'enabled'}}, 
                                  Android Sound: {{'disabled by alert once' if alert_once else 'enabled'}}, 
                                  iOS url: /api/frigate{{client_id}}/notifications/{{id}}/{{camera + '/clip.mp4' if video|length>0 and wait.trigger.payload_json['type'] == 'end' else attachment }}
                                  video: "{{video}}"
                                  critical: {{critical}}, 
                                Triggers: 
                                  New Snapshot: {{'True' if event['before']['snapshot']['frame_time'] != event['after']['snapshot']['frame_time'] else 'False'}}{{' - Disabled' if not update_thumbnail}} 
                                  Presence Changed: {{presence_changed}}, 
                                  Stationary Moved: {{stationary_moved}}, 
                                  Entered Zones Changed: {{'True' if event['before']['entered_zones'] != event['after']['entered_zones'] else 'False'}}{{' - Disabled' if not zone_only}}, 
                                  sublabel changed: {{ sub_label != sub_label_before }}{{' - Disabled' if not update_sub_label}}, 
                                Conditions: 
                                  Loitering: {{loitering}}
                                    or
                                  Filters: 
                                    Zones: 
                                      Zone Filter Enabled: {{zone_only}}, 
                                      Multi Zone Enabled: {{zone_multi}}, 
                                      Required Zones: {{input_zones}}, 
                                      Last Zones: {{last_zones}}, 
                                      Entered zones: {{enteredzones|list|length}} - {{enteredzones}}, 
                                      TEST: {{'PASS' if not zone_only or (not zone_multi and zones|select('in', enteredzones)|list|length ) else 'PASS (Multi)' if zone_only and zone_multi and zone_multi_filter else 'FAIL (Multi)' if zone_only and zone_multi else 'FAIL' }}, 
                                    Object Filter: 
                                      Input: {{input_labels}}, 
                                      TEST: {{'PASS' if not labels|length or object in labels else 'FAIL'}}, 
                                    Presence entity (not home):
                                      Entity: {{presence_entity}}, 
                                      TEST:  {{'PASS' if not home else 'FAIL'}}, 
                                    Time Filter:
                                      Disabled times: {{disable_times}}, 
                                      TEST: {{'PASS' if now().hour not in disable_times else 'FAIL'}}
                                    State Filter: 
                                      state filter toggle on: {{state_only}}, 
                                      state filter entity: {{input_entity}}, 
                                      required states: {{input_states}}, 
                                      TEST: {{'PASS' if state_true else 'FAIL'}}, 
                                    Custom Filter: {{'PASS' if custom_filter else 'FAIL'}},
                - alias: "Custom Action Auto Multi"
                  choose:
                    - conditions:
                        - "{{ custom_action_auto_multi | length > 0 }}"
                        - "{{ loitering or (not home and zone_filter and zone_multi_filter and state_true and (new_snapshot or presence_changed or stationary_moved or zone_only_changed or entered_zones_changed or sub_label_changed)) }}"
                      sequence: !input "custom_action_auto_multi"
                - alias: "Update Notification"
                  choose:
                    - conditions: "{{ loitering or (custom_filter and not home and zone_filter and zone_multi_filter and state_true and (new_snapshot or presence_changed or stationary_moved or zone_only_changed or entered_zones_changed or sub_label_changed)) }}"
                      sequence:
                        - choose:
                            - conditions: "{{ not notify_group_target }}"
                              sequence:
                                - device_id: !input notify_device
                                  domain: mobile_app
                                  type: notify
                                  title: "{{title}}"
                                  message: "{{message}}"
                                  data:
                                    tag: "{{ id }}{{'-loitering' if loitering}}"
                                    group: "{{ group }}"
                                    color: "{{color}}"
                                    # Android Specific
                                    subject: "{{subtitle}}"
                                    image: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{attachment}}{{'&' if '?' in attachment else '?'}}format=android"
                                    video: "{{video}}"
                                    clickAction: "{{tap_action}}"
                                    ttl: 0
                                    priority: high
                                    alert_once: "{{ alert_once }}"
                                    notification_icon: "{{icon}}"
                                    sticky: "{{sticky}}"
                                    channel: "{{'alarm_stream' if critical else channel}}"
                                    car_ui: "{{android_auto}}"
                                    # iOS Specific
                                    subtitle: "{{subtitle}}"
                                    url: "{{tap_action}}"
                                    attachment:
                                      url: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera + '/clip.mp4' if video|length>0 and wait.trigger.payload_json['type'] == 'end' else attachment }}"
                                    push:
                                      sound:
                                        name: "{{ iif(update, 'none', sound) }}"
                                        volume: "{{ iif((update or sound == 'none'), 0, volume) }}"
                                        critical: "{{ iif(critical, 1, 0) }}"
                                    entity_id: "{{ios_live_view}}"
                                    # Actions
                                    actions:
                                      - action: URI
                                        title: "{{button_1}}"
                                        uri: "{{url_1}}"
                                        icon: "{{icon_1}}"
                                      - action: URI
                                        title: "{{button_2}}"
                                        uri: "{{url_2}}"
                                        icon: "{{icon_2}}"
                                      - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                        title: "{{button_3}}"
                                        uri: "{{url_3}}"
                                        icon: "{{icon_3}}"
                                        destructive: true
                            - conditions: "{{ tv }}"
                              sequence:
                                - service: "notify.{{ notify_group_target }}"
                                  data:
                                    title: "{{title}}"
                                    message: "{{message}}"
                                    data:
                                      tag: "{{ id }}{{'-loitering' if loitering}}"
                                      group: "{{ group }}"
                                      color: "{{color}}"
                                      # Android Specific
                                      subject: "{{subtitle}}"
                                      clickAction: "{{tap_action}}"
                                      ttl: 0
                                      priority: high
                                      alert_once: "{{ alert_once }}"
                                      notification_icon: "{{icon}}"
                                      sticky: "{{sticky}}"
                                      channel: "{{'alarm_stream' if critical else channel}}"
                                      car_ui: "{{android_auto}}"
                                      # Android/Fire TV
                                      image:
                                        url: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                                      video: "{{video}}"
                                      fontsize: "{{tv_size}}"
                                      position: "{{tv_position}}"
                                      duration: "{{tv_duration}}"
                                      transparency: "{{tv_transparency}}"
                                      interrupt: "{{tv_interrupt}}"
                                      timeout: 30
                                      # iOS Specific
                                      subtitle: "{{subtitle}}"
                                      url: "{{tap_action}}"
                                      attachment:
                                        url: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera + '/clip.mp4' if video|length>0 and wait.trigger.payload_json['type'] == 'end' else attachment }}"
                                      push:
                                        sound:
                                          name: "{{ iif(update, 'none', sound) }}"
                                          volume: "{{ iif((update or sound == 'none'), 0, volume) }}"
                                          critical: "{{ iif(critical, 1, 0) }}"
                                      entity_id: "{{ios_live_view}}"
                                      # Actions
                                      actions:
                                        - action: URI
                                          title: "{{button_1}}"
                                          uri: "{{url_1}}"
                                          icon: "{{icon_1}}"
                                        - action: URI
                                          title: "{{button_2}}"
                                          uri: "{{url_2}}"
                                          icon: "{{icon_2}}"
                                        - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                          title: "{{button_3}}"
                                          uri: "{{url_3}}"
                                          icon: "{{icon_3}}"
                                          destructive: true
                          default:
                            - service: "notify.{{ notify_group_target }}"
                              data:
                                title: "{{title}}"
                                message: "{{message}}"
                                data:
                                  tag: "{{ id }}{{'-loitering' if loitering}}"
                                  group: "{{ group }}"
                                  color: "{{color}}"
                                  # Android Specific
                                  subject: "{{subtitle}}"
                                  image: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{attachment}}{{'&' if '?' in attachment else '?'}}format=android"
                                  video: "{{video}}"
                                  clickAction: "{{tap_action}}"
                                  ttl: 0
                                  priority: high
                                  alert_once: "{{ alert_once }}"
                                  notification_icon: "{{icon}}"
                                  sticky: "{{sticky}}"
                                  channel: "{{'alarm_stream' if critical else channel}}"
                                  car_ui: "{{android_auto}}"
                                  # Android/Fire TV
                                  fontsize: "{{tv_size}}"
                                  position: "{{tv_position}}"
                                  duration: "{{tv_duration}}"
                                  transparency: "{{tv_transparency}}"
                                  interrupt: "{{tv_interrupt}}"
                                  # iOS Specific
                                  subtitle: "{{subtitle}}"
                                  url: "{{tap_action}}"
                                  attachment:
                                    url: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera + '/clip.mp4' if video|length>0 and wait.trigger.payload_json['type'] == 'end' else attachment }}"
                                  push:
                                    sound:
                                      name: "{{ iif(update, 'none', sound) }}"
                                      volume: "{{ iif((update or sound == 'none'), 0, volume) }}"
                                      critical: "{{ iif(critical, 1, 0) }}"
                                  entity_id: "{{ios_live_view}}"
                                  # Actions
                                  actions:
                                    - action: URI
                                      title: "{{button_1}}"
                                      uri: "{{url_1}}"
                                      icon: "{{icon_1}}"
                                    - action: URI
                                      title: "{{button_2}}"
                                      uri: "{{url_2}}"
                                      icon: "{{icon_2}}"
                                    - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                      title: "{{button_3}}"
                                      uri: "{{url_3}}"
                                      icon: "{{icon_3}}"
                                      destructive: true
              until: "{{ not wait.trigger or wait.trigger.payload_json['type'] == 'end' }}"
